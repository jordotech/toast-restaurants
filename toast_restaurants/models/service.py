# coding: utf-8

"""
    Restaurant Info API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.0.0
    Contact: integrations@toasttab.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Service(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'hours': 'Hours',
        'overnight': 'bool'
    }

    attribute_map = {
        'name': 'name',
        'hours': 'hours',
        'overnight': 'overnight'
    }

    def __init__(self, name=None, hours=None, overnight=None):
        """
        Service - a model defined in Swagger
        """

        self._name = None
        self._hours = None
        self._overnight = None

        if name is not None:
          self.name = name
        if hours is not None:
          self.hours = hours
        if overnight is not None:
          self.overnight = overnight

    @property
    def name(self):
        """
        Gets the name of this Service.

        :return: The name of this Service.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this Service.

        :param name: The name of this Service.
        :type: str
        """

        self._name = name

    @property
    def hours(self):
        """
        Gets the hours of this Service.

        :return: The hours of this Service.
        :rtype: Hours
        """
        return self._hours

    @hours.setter
    def hours(self, hours):
        """
        Sets the hours of this Service.

        :param hours: The hours of this Service.
        :type: Hours
        """

        self._hours = hours

    @property
    def overnight(self):
        """
        Gets the overnight of this Service.
        Indicates whether any portion of the period of time that a service is available occurs after 00:00 (midnight) and before the business day cutoff time for the restaurant. An overnight shift spans two calendar dates but occurs during one business day. 

        :return: The overnight of this Service.
        :rtype: bool
        """
        return self._overnight

    @overnight.setter
    def overnight(self, overnight):
        """
        Sets the overnight of this Service.
        Indicates whether any portion of the period of time that a service is available occurs after 00:00 (midnight) and before the business day cutoff time for the restaurant. An overnight shift spans two calendar dates but occurs during one business day. 

        :param overnight: The overnight of this Service.
        :type: bool
        """

        self._overnight = overnight

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Service):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

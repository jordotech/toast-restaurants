# coding: utf-8

"""
    Restaurant Info API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.0.0
    Contact: integrations@toasttab.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class TakeoutPaymentOptions(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cash': 'bool',
        'cc_same_day': 'bool',
        'cc_future': 'bool',
        'cc_in_store': 'bool'
    }

    attribute_map = {
        'cash': 'cash',
        'cc_same_day': 'ccSameDay',
        'cc_future': 'ccFuture',
        'cc_in_store': 'ccInStore'
    }

    def __init__(self, cash=None, cc_same_day=None, cc_future=None, cc_in_store=None):
        """
        TakeoutPaymentOptions - a model defined in Swagger
        """

        self._cash = None
        self._cc_same_day = None
        self._cc_future = None
        self._cc_in_store = None

        if cash is not None:
          self.cash = cash
        if cc_same_day is not None:
          self.cc_same_day = cc_same_day
        if cc_future is not None:
          self.cc_future = cc_future
        if cc_in_store is not None:
          self.cc_in_store = cc_in_store

    @property
    def cash(self):
        """
        Gets the cash of this TakeoutPaymentOptions.
        Indicates whether the restaurant accepts cash payment for takeout orders that are placed online. 

        :return: The cash of this TakeoutPaymentOptions.
        :rtype: bool
        """
        return self._cash

    @cash.setter
    def cash(self, cash):
        """
        Sets the cash of this TakeoutPaymentOptions.
        Indicates whether the restaurant accepts cash payment for takeout orders that are placed online. 

        :param cash: The cash of this TakeoutPaymentOptions.
        :type: bool
        """

        self._cash = cash

    @property
    def cc_same_day(self):
        """
        Gets the cc_same_day of this TakeoutPaymentOptions.
        Indicates whether the restaurant accepts online credit card payment for takeout orders that the customer will pick up on the same day. 

        :return: The cc_same_day of this TakeoutPaymentOptions.
        :rtype: bool
        """
        return self._cc_same_day

    @cc_same_day.setter
    def cc_same_day(self, cc_same_day):
        """
        Sets the cc_same_day of this TakeoutPaymentOptions.
        Indicates whether the restaurant accepts online credit card payment for takeout orders that the customer will pick up on the same day. 

        :param cc_same_day: The cc_same_day of this TakeoutPaymentOptions.
        :type: bool
        """

        self._cc_same_day = cc_same_day

    @property
    def cc_future(self):
        """
        Gets the cc_future of this TakeoutPaymentOptions.
        Indicates whether the restaurant accepts online credit card payment for takeout orders that the customer will pick up on a day after the customer places the order. 

        :return: The cc_future of this TakeoutPaymentOptions.
        :rtype: bool
        """
        return self._cc_future

    @cc_future.setter
    def cc_future(self, cc_future):
        """
        Sets the cc_future of this TakeoutPaymentOptions.
        Indicates whether the restaurant accepts online credit card payment for takeout orders that the customer will pick up on a day after the customer places the order. 

        :param cc_future: The cc_future of this TakeoutPaymentOptions.
        :type: bool
        """

        self._cc_future = cc_future

    @property
    def cc_in_store(self):
        """
        Gets the cc_in_store of this TakeoutPaymentOptions.
        Indicates whether the restaurant accepts credit card payment at the time the customer picks up a takeout order. 

        :return: The cc_in_store of this TakeoutPaymentOptions.
        :rtype: bool
        """
        return self._cc_in_store

    @cc_in_store.setter
    def cc_in_store(self, cc_in_store):
        """
        Sets the cc_in_store of this TakeoutPaymentOptions.
        Indicates whether the restaurant accepts credit card payment at the time the customer picks up a takeout order. 

        :param cc_in_store: The cc_in_store of this TakeoutPaymentOptions.
        :type: bool
        """

        self._cc_in_store = cc_in_store

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, TakeoutPaymentOptions):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

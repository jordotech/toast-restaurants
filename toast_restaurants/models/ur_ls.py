# coding: utf-8

"""
    Restaurant Info API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.0.0
    Contact: integrations@toasttab.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class URLs(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'website': 'str',
        'facebook': 'str',
        'twitter': 'str',
        'order_online': 'str',
        'purchase_gift_card': 'str',
        'check_gift_card': 'str'
    }

    attribute_map = {
        'website': 'website',
        'facebook': 'facebook',
        'twitter': 'twitter',
        'order_online': 'orderOnline',
        'purchase_gift_card': 'purchaseGiftCard',
        'check_gift_card': 'checkGiftCard'
    }

    def __init__(self, website=None, facebook=None, twitter=None, order_online=None, purchase_gift_card=None, check_gift_card=None):
        """
        URLs - a model defined in Swagger
        """

        self._website = None
        self._facebook = None
        self._twitter = None
        self._order_online = None
        self._purchase_gift_card = None
        self._check_gift_card = None

        if website is not None:
          self.website = website
        if facebook is not None:
          self.facebook = facebook
        if twitter is not None:
          self.twitter = twitter
        if order_online is not None:
          self.order_online = order_online
        if purchase_gift_card is not None:
          self.purchase_gift_card = purchase_gift_card
        if check_gift_card is not None:
          self.check_gift_card = check_gift_card

    @property
    def website(self):
        """
        Gets the website of this URLs.
        The primary website for the restaurant.

        :return: The website of this URLs.
        :rtype: str
        """
        return self._website

    @website.setter
    def website(self, website):
        """
        Sets the website of this URLs.
        The primary website for the restaurant.

        :param website: The website of this URLs.
        :type: str
        """

        self._website = website

    @property
    def facebook(self):
        """
        Gets the facebook of this URLs.
        A Facebook™ page for the restaurant.

        :return: The facebook of this URLs.
        :rtype: str
        """
        return self._facebook

    @facebook.setter
    def facebook(self, facebook):
        """
        Sets the facebook of this URLs.
        A Facebook™ page for the restaurant.

        :param facebook: The facebook of this URLs.
        :type: str
        """

        self._facebook = facebook

    @property
    def twitter(self):
        """
        Gets the twitter of this URLs.
        A Twitter™ handle for the restaurant.

        :return: The twitter of this URLs.
        :rtype: str
        """
        return self._twitter

    @twitter.setter
    def twitter(self, twitter):
        """
        Sets the twitter of this URLs.
        A Twitter™ handle for the restaurant.

        :param twitter: The twitter of this URLs.
        :type: str
        """

        self._twitter = twitter

    @property
    def order_online(self):
        """
        Gets the order_online of this URLs.
        A URL for the online ordering site for the restaurant.

        :return: The order_online of this URLs.
        :rtype: str
        """
        return self._order_online

    @order_online.setter
    def order_online(self, order_online):
        """
        Sets the order_online of this URLs.
        A URL for the online ordering site for the restaurant.

        :param order_online: The order_online of this URLs.
        :type: str
        """

        self._order_online = order_online

    @property
    def purchase_gift_card(self):
        """
        Gets the purchase_gift_card of this URLs.
        A URL for the gift card purchasing site for the restaurant.

        :return: The purchase_gift_card of this URLs.
        :rtype: str
        """
        return self._purchase_gift_card

    @purchase_gift_card.setter
    def purchase_gift_card(self, purchase_gift_card):
        """
        Sets the purchase_gift_card of this URLs.
        A URL for the gift card purchasing site for the restaurant.

        :param purchase_gift_card: The purchase_gift_card of this URLs.
        :type: str
        """

        self._purchase_gift_card = purchase_gift_card

    @property
    def check_gift_card(self):
        """
        Gets the check_gift_card of this URLs.
        A URL for a site at which guests can find balances and other information about gift cards.

        :return: The check_gift_card of this URLs.
        :rtype: str
        """
        return self._check_gift_card

    @check_gift_card.setter
    def check_gift_card(self, check_gift_card):
        """
        Sets the check_gift_card of this URLs.
        A URL for a site at which guests can find balances and other information about gift cards.

        :param check_gift_card: The check_gift_card of this URLs.
        :type: str
        """

        self._check_gift_card = check_gift_card

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, URLs):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

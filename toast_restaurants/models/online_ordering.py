# coding: utf-8

"""
    Restaurant Info API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.0.0
    Contact: integrations@toasttab.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class OnlineOrdering(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'enabled': 'bool',
        'scheduling': 'bool',
        'special_requests': 'bool',
        'special_requests_message': 'str',
        'payment_options': 'PaymentOptions'
    }

    attribute_map = {
        'enabled': 'enabled',
        'scheduling': 'scheduling',
        'special_requests': 'specialRequests',
        'special_requests_message': 'specialRequestsMessage',
        'payment_options': 'paymentOptions'
    }

    def __init__(self, enabled=None, scheduling=None, special_requests=None, special_requests_message=None, payment_options=None):
        """
        OnlineOrdering - a model defined in Swagger
        """

        self._enabled = None
        self._scheduling = None
        self._special_requests = None
        self._special_requests_message = None
        self._payment_options = None

        if enabled is not None:
          self.enabled = enabled
        if scheduling is not None:
          self.scheduling = scheduling
        if special_requests is not None:
          self.special_requests = special_requests
        if special_requests_message is not None:
          self.special_requests_message = special_requests_message
        if payment_options is not None:
          self.payment_options = payment_options

    @property
    def enabled(self):
        """
        Gets the enabled of this OnlineOrdering.
        Indicates whether the restaurant allows online ordering and has enabled it in the Toast administration back-end. 

        :return: The enabled of this OnlineOrdering.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """
        Sets the enabled of this OnlineOrdering.
        Indicates whether the restaurant allows online ordering and has enabled it in the Toast administration back-end. 

        :param enabled: The enabled of this OnlineOrdering.
        :type: bool
        """

        self._enabled = enabled

    @property
    def scheduling(self):
        """
        Gets the scheduling of this OnlineOrdering.
        Indicates whether the online ordering function for the restaurant allows customers to place orders that will be fulfilled in the future. If this value is `false`, orders will be fulfilled as soon as possible. 

        :return: The scheduling of this OnlineOrdering.
        :rtype: bool
        """
        return self._scheduling

    @scheduling.setter
    def scheduling(self, scheduling):
        """
        Sets the scheduling of this OnlineOrdering.
        Indicates whether the online ordering function for the restaurant allows customers to place orders that will be fulfilled in the future. If this value is `false`, orders will be fulfilled as soon as possible. 

        :param scheduling: The scheduling of this OnlineOrdering.
        :type: bool
        """

        self._scheduling = scheduling

    @property
    def special_requests(self):
        """
        Gets the special_requests of this OnlineOrdering.
        Indicates whether the online ordering function for the restaurant allows customers to include written notes with additional instructions for their orders. 

        :return: The special_requests of this OnlineOrdering.
        :rtype: bool
        """
        return self._special_requests

    @special_requests.setter
    def special_requests(self, special_requests):
        """
        Sets the special_requests of this OnlineOrdering.
        Indicates whether the online ordering function for the restaurant allows customers to include written notes with additional instructions for their orders. 

        :param special_requests: The special_requests of this OnlineOrdering.
        :type: bool
        """

        self._special_requests = special_requests

    @property
    def special_requests_message(self):
        """
        Gets the special_requests_message of this OnlineOrdering.
        A written message that is shown to customers when they include additional instructions with an order. For example, the message might be \"no substitutions.\" 

        :return: The special_requests_message of this OnlineOrdering.
        :rtype: str
        """
        return self._special_requests_message

    @special_requests_message.setter
    def special_requests_message(self, special_requests_message):
        """
        Sets the special_requests_message of this OnlineOrdering.
        A written message that is shown to customers when they include additional instructions with an order. For example, the message might be \"no substitutions.\" 

        :param special_requests_message: The special_requests_message of this OnlineOrdering.
        :type: str
        """

        self._special_requests_message = special_requests_message

    @property
    def payment_options(self):
        """
        Gets the payment_options of this OnlineOrdering.
        Information about the forms of payment that the restaurant accepts for online orders. 

        :return: The payment_options of this OnlineOrdering.
        :rtype: PaymentOptions
        """
        return self._payment_options

    @payment_options.setter
    def payment_options(self, payment_options):
        """
        Sets the payment_options of this OnlineOrdering.
        Information about the forms of payment that the restaurant accepts for online orders. 

        :param payment_options: The payment_options of this OnlineOrdering.
        :type: PaymentOptions
        """

        self._payment_options = payment_options

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, OnlineOrdering):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

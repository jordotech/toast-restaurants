# coding: utf-8

"""
    Restaurant Info API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.0.0
    Contact: integrations@toasttab.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Image(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'width': 'int',
        'height': 'int',
        'url': 'str',
        'height_width_ratio': 'float'
    }

    attribute_map = {
        'width': 'width',
        'height': 'height',
        'url': 'url',
        'height_width_ratio': 'heightWidthRatio'
    }

    def __init__(self, width=None, height=None, url=None, height_width_ratio=None):
        """
        Image - a model defined in Swagger
        """

        self._width = None
        self._height = None
        self._url = None
        self._height_width_ratio = None

        if width is not None:
          self.width = width
        if height is not None:
          self.height = height
        if url is not None:
          self.url = url
        if height_width_ratio is not None:
          self.height_width_ratio = height_width_ratio

    @property
    def width(self):
        """
        Gets the width of this Image.
        The width of the image, in pixels.

        :return: The width of this Image.
        :rtype: int
        """
        return self._width

    @width.setter
    def width(self, width):
        """
        Sets the width of this Image.
        The width of the image, in pixels.

        :param width: The width of this Image.
        :type: int
        """

        self._width = width

    @property
    def height(self):
        """
        Gets the height of this Image.
        The height of the image, in pixels.

        :return: The height of this Image.
        :rtype: int
        """
        return self._height

    @height.setter
    def height(self, height):
        """
        Sets the height of this Image.
        The height of the image, in pixels.

        :param height: The height of this Image.
        :type: int
        """

        self._height = height

    @property
    def url(self):
        """
        Gets the url of this Image.

        :return: The url of this Image.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """
        Sets the url of this Image.

        :param url: The url of this Image.
        :type: str
        """

        self._url = url

    @property
    def height_width_ratio(self):
        """
        Gets the height_width_ratio of this Image.
        The ratio of height to width

        :return: The height_width_ratio of this Image.
        :rtype: float
        """
        return self._height_width_ratio

    @height_width_ratio.setter
    def height_width_ratio(self, height_width_ratio):
        """
        Sets the height_width_ratio of this Image.
        The ratio of height to width

        :param height_width_ratio: The height_width_ratio of this Image.
        :type: float
        """

        self._height_width_ratio = height_width_ratio

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Image):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

# coding: utf-8

"""
    Restaurant Info API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.0.0
    Contact: integrations@toasttab.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class General(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'location_name': 'str',
        'location_code': 'str',
        'description': 'str',
        'time_zone': 'str',
        'closeout_hour': 'int',
        'management_group_guid': 'str'
    }

    attribute_map = {
        'name': 'name',
        'location_name': 'locationName',
        'location_code': 'locationCode',
        'description': 'description',
        'time_zone': 'timeZone',
        'closeout_hour': 'closeoutHour',
        'management_group_guid': 'managementGroupGuid'
    }

    def __init__(self, name=None, location_name=None, location_code=None, description=None, time_zone=None, closeout_hour=None, management_group_guid=None):
        """
        General - a model defined in Swagger
        """

        self._name = None
        self._location_name = None
        self._location_code = None
        self._description = None
        self._time_zone = None
        self._closeout_hour = None
        self._management_group_guid = None

        if name is not None:
          self.name = name
        if location_name is not None:
          self.location_name = location_name
        if location_code is not None:
          self.location_code = location_code
        if description is not None:
          self.description = description
        if time_zone is not None:
          self.time_zone = time_zone
        if closeout_hour is not None:
          self.closeout_hour = closeout_hour
        if management_group_guid is not None:
          self.management_group_guid = management_group_guid

    @property
    def name(self):
        """
        Gets the name of this General.
        The customer-facing name of the restaurant. For example, the `name` of a restaurant might be `Tommy's Burgers`. 

        :return: The name of this General.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this General.
        The customer-facing name of the restaurant. For example, the `name` of a restaurant might be `Tommy's Burgers`. 

        :param name: The name of this General.
        :type: str
        """

        self._name = name

    @property
    def location_name(self):
        """
        Gets the location_name of this General.
        A name used externally to differentiate multiple locations, like Neighborhood, Square, City, or Hotel.

        :return: The location_name of this General.
        :rtype: str
        """
        return self._location_name

    @location_name.setter
    def location_name(self, location_name):
        """
        Sets the location_name of this General.
        A name used externally to differentiate multiple locations, like Neighborhood, Square, City, or Hotel.

        :param location_name: The location_name of this General.
        :type: str
        """

        self._location_name = location_name

    @property
    def location_code(self):
        """
        Gets the location_code of this General.
        A code used internally to differentiate multiple locations, typically a 3 or 4 letter code.

        :return: The location_code of this General.
        :rtype: str
        """
        return self._location_code

    @location_code.setter
    def location_code(self, location_code):
        """
        Sets the location_code of this General.
        A code used internally to differentiate multiple locations, typically a 3 or 4 letter code.

        :param location_code: The location_code of this General.
        :type: str
        """

        self._location_code = location_code

    @property
    def description(self):
        """
        Gets the description of this General.
        A description of the restaurant, such as information about the atmosphere and food.

        :return: The description of this General.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this General.
        A description of the restaurant, such as information about the atmosphere and food.

        :param description: The description of this General.
        :type: str
        """

        self._description = description

    @property
    def time_zone(self):
        """
        Gets the time_zone of this General.
        The name of the restaurant's time zone in the time zone database. For example, `America/New_York`. 

        :return: The time_zone of this General.
        :rtype: str
        """
        return self._time_zone

    @time_zone.setter
    def time_zone(self, time_zone):
        """
        Sets the time_zone of this General.
        The name of the restaurant's time zone in the time zone database. For example, `America/New_York`. 

        :param time_zone: The time_zone of this General.
        :type: str
        """

        self._time_zone = time_zone

    @property
    def closeout_hour(self):
        """
        Gets the closeout_hour of this General.
        The hour of the day that separates one business day from the next. This is in the time zone of the restaurant. You can set the `closeoutHour` from 0-12 (midnight to noon) in the Toast administration back-end. 

        :return: The closeout_hour of this General.
        :rtype: int
        """
        return self._closeout_hour

    @closeout_hour.setter
    def closeout_hour(self, closeout_hour):
        """
        Sets the closeout_hour of this General.
        The hour of the day that separates one business day from the next. This is in the time zone of the restaurant. You can set the `closeoutHour` from 0-12 (midnight to noon) in the Toast administration back-end. 

        :param closeout_hour: The closeout_hour of this General.
        :type: int
        """

        self._closeout_hour = closeout_hour

    @property
    def management_group_guid(self):
        """
        Gets the management_group_guid of this General.
        The unique identifier of the restaurant group for the restaurant.

        :return: The management_group_guid of this General.
        :rtype: str
        """
        return self._management_group_guid

    @management_group_guid.setter
    def management_group_guid(self, management_group_guid):
        """
        Sets the management_group_guid of this General.
        The unique identifier of the restaurant group for the restaurant.

        :param management_group_guid: The management_group_guid of this General.
        :type: str
        """

        self._management_group_guid = management_group_guid

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, General):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

# coding: utf-8

"""
    Restaurant Info API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.0.0
    Contact: integrations@toasttab.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Schedules(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'day_schedules': 'dict(str, DaySchedule)',
        'week_schedule': 'WeekSchedule'
    }

    attribute_map = {
        'day_schedules': 'daySchedules',
        'week_schedule': 'weekSchedule'
    }

    def __init__(self, day_schedules=None, week_schedule=None):
        """
        Schedules - a model defined in Swagger
        """

        self._day_schedules = None
        self._week_schedule = None

        if day_schedules is not None:
          self.day_schedules = day_schedules
        if week_schedule is not None:
          self.week_schedule = week_schedule

    @property
    def day_schedules(self):
        """
        Gets the day_schedules of this Schedules.
        A map of <a href=\"#/definitions/DaySchedule\">`DaySchedule`</a> objects. The value names in this object are key identifiers that are used to associate a day schedule with a day of the week in the `weekSchedule` value. 

        :return: The day_schedules of this Schedules.
        :rtype: dict(str, DaySchedule)
        """
        return self._day_schedules

    @day_schedules.setter
    def day_schedules(self, day_schedules):
        """
        Sets the day_schedules of this Schedules.
        A map of <a href=\"#/definitions/DaySchedule\">`DaySchedule`</a> objects. The value names in this object are key identifiers that are used to associate a day schedule with a day of the week in the `weekSchedule` value. 

        :param day_schedules: The day_schedules of this Schedules.
        :type: dict(str, DaySchedule)
        """

        self._day_schedules = day_schedules

    @property
    def week_schedule(self):
        """
        Gets the week_schedule of this Schedules.

        :return: The week_schedule of this Schedules.
        :rtype: WeekSchedule
        """
        return self._week_schedule

    @week_schedule.setter
    def week_schedule(self, week_schedule):
        """
        Sets the week_schedule of this Schedules.

        :param week_schedule: The week_schedule of this Schedules.
        :type: WeekSchedule
        """

        self._week_schedule = week_schedule

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Schedules):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

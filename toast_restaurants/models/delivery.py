# coding: utf-8

"""
    Restaurant Info API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.0.0
    Contact: integrations@toasttab.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Delivery(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'enabled': 'bool',
        'minimum': 'float',
        'area': 'str'
    }

    attribute_map = {
        'enabled': 'enabled',
        'minimum': 'minimum',
        'area': 'area'
    }

    def __init__(self, enabled=None, minimum=None, area=None):
        """
        Delivery - a model defined in Swagger
        """

        self._enabled = None
        self._minimum = None
        self._area = None

        if enabled is not None:
          self.enabled = enabled
        if minimum is not None:
          self.minimum = minimum
        if area is not None:
          self.area = area

    @property
    def enabled(self):
        """
        Gets the enabled of this Delivery.
        Indicates whether the restaurant provides delivery service and has enabled the delivery configuration in the Toast administration back-end. 

        :return: The enabled of this Delivery.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """
        Sets the enabled of this Delivery.
        Indicates whether the restaurant provides delivery service and has enabled the delivery configuration in the Toast administration back-end. 

        :param enabled: The enabled of this Delivery.
        :type: bool
        """

        self._enabled = enabled

    @property
    def minimum(self):
        """
        Gets the minimum of this Delivery.
        The minimum order price that is qualified for delivery. For example, a restaurant might not deliver orders that cost less than $25.00. 

        :return: The minimum of this Delivery.
        :rtype: float
        """
        return self._minimum

    @minimum.setter
    def minimum(self, minimum):
        """
        Sets the minimum of this Delivery.
        The minimum order price that is qualified for delivery. For example, a restaurant might not deliver orders that cost less than $25.00. 

        :param minimum: The minimum of this Delivery.
        :type: float
        """

        self._minimum = minimum

    @property
    def area(self):
        """
        Gets the area of this Delivery.
        The geographic area in which the restaurant provides delivery service. The delivery area is represented by an encoded set of latitude and longitude coordinates that describe a polygon area on a map. The coordinates are encoded using the Google maps encoded polyline algorithm format. For more information about the way that the encoded polyline algorithm format encodes location coordinates, see https://developers.google.com/maps/documentation/utilities/polylinealgorithm. You can decode the coordinates of the delivery area using any software that supports the encoded polyline algorithm format. For example, you can decode the coordinates using the Mapline Polyline decoding program (https://github.com/mapbox/polyline). The delivery area coordinates are a JSON array of decimal degree latitude and longitude pairs. For example, `[[42.36083,-71.14798],[42.34028,-71.15673],[42.3272,-71.14386]]`. 

        :return: The area of this Delivery.
        :rtype: str
        """
        return self._area

    @area.setter
    def area(self, area):
        """
        Sets the area of this Delivery.
        The geographic area in which the restaurant provides delivery service. The delivery area is represented by an encoded set of latitude and longitude coordinates that describe a polygon area on a map. The coordinates are encoded using the Google maps encoded polyline algorithm format. For more information about the way that the encoded polyline algorithm format encodes location coordinates, see https://developers.google.com/maps/documentation/utilities/polylinealgorithm. You can decode the coordinates of the delivery area using any software that supports the encoded polyline algorithm format. For example, you can decode the coordinates using the Mapline Polyline decoding program (https://github.com/mapbox/polyline). The delivery area coordinates are a JSON array of decimal degree latitude and longitude pairs. For example, `[[42.36083,-71.14798],[42.34028,-71.15673],[42.3272,-71.14386]]`. 

        :param area: The area of this Delivery.
        :type: str
        """

        self._area = area

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Delivery):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

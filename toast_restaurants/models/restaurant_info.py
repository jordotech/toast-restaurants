# coding: utf-8

"""
    Restaurant Info API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.0.0
    Contact: integrations@toasttab.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class RestaurantInfo(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'guid': 'str',
        'general': 'General',
        'urls': 'URLs',
        'location': 'Location',
        'schedules': 'Schedules',
        'delivery': 'Delivery',
        'online_ordering': 'OnlineOrdering',
        'prep_times': 'PrepTimes'
    }

    attribute_map = {
        'guid': 'guid',
        'general': 'general',
        'urls': 'urls',
        'location': 'location',
        'schedules': 'schedules',
        'delivery': 'delivery',
        'online_ordering': 'onlineOrdering',
        'prep_times': 'prepTimes'
    }

    def __init__(self, guid=None, general=None, urls=None, location=None, schedules=None, delivery=None, online_ordering=None, prep_times=None):
        """
        RestaurantInfo - a model defined in Swagger
        """

        self._guid = None
        self._general = None
        self._urls = None
        self._location = None
        self._schedules = None
        self._delivery = None
        self._online_ordering = None
        self._prep_times = None

        if guid is not None:
          self.guid = guid
        if general is not None:
          self.general = general
        if urls is not None:
          self.urls = urls
        if location is not None:
          self.location = location
        if schedules is not None:
          self.schedules = schedules
        if delivery is not None:
          self.delivery = delivery
        if online_ordering is not None:
          self.online_ordering = online_ordering
        if prep_times is not None:
          self.prep_times = prep_times

    @property
    def guid(self):
        """
        Gets the guid of this RestaurantInfo.

        :return: The guid of this RestaurantInfo.
        :rtype: str
        """
        return self._guid

    @guid.setter
    def guid(self, guid):
        """
        Sets the guid of this RestaurantInfo.

        :param guid: The guid of this RestaurantInfo.
        :type: str
        """

        self._guid = guid

    @property
    def general(self):
        """
        Gets the general of this RestaurantInfo.

        :return: The general of this RestaurantInfo.
        :rtype: General
        """
        return self._general

    @general.setter
    def general(self, general):
        """
        Sets the general of this RestaurantInfo.

        :param general: The general of this RestaurantInfo.
        :type: General
        """

        self._general = general

    @property
    def urls(self):
        """
        Gets the urls of this RestaurantInfo.

        :return: The urls of this RestaurantInfo.
        :rtype: URLs
        """
        return self._urls

    @urls.setter
    def urls(self, urls):
        """
        Sets the urls of this RestaurantInfo.

        :param urls: The urls of this RestaurantInfo.
        :type: URLs
        """

        self._urls = urls

    @property
    def location(self):
        """
        Gets the location of this RestaurantInfo.

        :return: The location of this RestaurantInfo.
        :rtype: Location
        """
        return self._location

    @location.setter
    def location(self, location):
        """
        Sets the location of this RestaurantInfo.

        :param location: The location of this RestaurantInfo.
        :type: Location
        """

        self._location = location

    @property
    def schedules(self):
        """
        Gets the schedules of this RestaurantInfo.

        :return: The schedules of this RestaurantInfo.
        :rtype: Schedules
        """
        return self._schedules

    @schedules.setter
    def schedules(self, schedules):
        """
        Sets the schedules of this RestaurantInfo.

        :param schedules: The schedules of this RestaurantInfo.
        :type: Schedules
        """

        self._schedules = schedules

    @property
    def delivery(self):
        """
        Gets the delivery of this RestaurantInfo.

        :return: The delivery of this RestaurantInfo.
        :rtype: Delivery
        """
        return self._delivery

    @delivery.setter
    def delivery(self, delivery):
        """
        Sets the delivery of this RestaurantInfo.

        :param delivery: The delivery of this RestaurantInfo.
        :type: Delivery
        """

        self._delivery = delivery

    @property
    def online_ordering(self):
        """
        Gets the online_ordering of this RestaurantInfo.

        :return: The online_ordering of this RestaurantInfo.
        :rtype: OnlineOrdering
        """
        return self._online_ordering

    @online_ordering.setter
    def online_ordering(self, online_ordering):
        """
        Sets the online_ordering of this RestaurantInfo.

        :param online_ordering: The online_ordering of this RestaurantInfo.
        :type: OnlineOrdering
        """

        self._online_ordering = online_ordering

    @property
    def prep_times(self):
        """
        Gets the prep_times of this RestaurantInfo.

        :return: The prep_times of this RestaurantInfo.
        :rtype: PrepTimes
        """
        return self._prep_times

    @prep_times.setter
    def prep_times(self, prep_times):
        """
        Sets the prep_times of this RestaurantInfo.

        :param prep_times: The prep_times of this RestaurantInfo.
        :type: PrepTimes
        """

        self._prep_times = prep_times

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, RestaurantInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
